swagger: "2.0"
info:
  description: "This is an alternative Elrond API created by PartnerStaking."
  version: "0.0.1"
  title: "Elrond API"
  contact:
    email: "contact@partnerstaking.com"
  x-logo:
    url: 'https://partnerstaking.com/images/logo.png'
    altText: PartnerStaking
  license:
    name: "GNU General Public License v3.0"
    url: "https://www.gnu.org/licenses/gpl-3.0.en.html"

servers:
  - url: //api.partnerstaking.com
    description: Default server
  - url: //api-alpha.partnerstaking.com
    description: Alpha server

tags:
  - name: "transaction"
    description: "Endpoints for getting or executing transactions"
  - name: "transaction_model"
    x-displayName: Transaction
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Transaction" />

  - name: "address"
    description: "Endpoints used to obtain information about an Address"
  - name: "addressDetails_model"
    x-displayName: AddressDetails
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/AddressDetails" />

  - name: "node"
    description: "Endpoints used to obtain information about Nodes and Staking"
  - name: "node_model"
    x-displayName: Node
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Node" />
  - name: "stakingProvider_model"
    x-displayName: StakingProvider
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/StakingProvider" />

  - name: "token"
    description: "Endpoints used to obtain ESDT/NFT information"
  - name: "token_model"
    x-displayName: Token
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Token" />
  - name: "tokenProperties_model"
    x-displayName: TokenProperties
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TokenProperties" />

  - name: "network"
    description: "Endpoints used to obtain Elrond network information"
  - name: "networkconfig_model"
    x-displayName: NetworkConfig
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/NetworkConfig" />
  - name: "networkstatus_model"
    x-displayName: NetworkStatus
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/NetworkStatus" />

x-tagGroups:
  - name: Endpoints
    tags:
      - transaction
      - address
      - node
      - token
      - network
  - name: Models
    tags:
      - transaction_model
      - addressDetails_model
      - node_model
      - stakingProvider_model
      - token_model
      - tokenProperties_model
      - networkconfig_model
      - networkstatus_model

schemes:
  - "https"
paths:
  /transaction/{hash}:
    get:
      tags:
        - "transaction"
      summary: "Get transaction"
      description: "Get a transaction by hash. Returns a Transaction."
      operationId: "transaction"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "hash"
          type: "string"
          description: "Transaction hash"
          required: true
        - in: "query"
          name: "process"
          type: "boolean"
          description: "Whether to process the transaction"
          required: false
          default: true
      responses:
        "400":
          description: "Invalid hash"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transaction"
  /transactions:
    get:
      tags:
        - "transaction"
      summary: "Get Transactions"
      description: "Get all Transactions. Returns a List of Transaction objects."
      operationId: "getTransactions"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "pageSize"
          type: "int"
          description: "Number of maximum Transactions in response (max 100)"
          required: false
          default: 20
        - in: "query"
          name: "startTimestamp"
          type: "integer"
          format: "int64"
          description: "Start timestamp to query from"
          required: false
          default: 0
        - in: "query"
          name: "newer"
          type: "boolean"
          description: "Whether to query newer or older Transactions starting with startTimestamp"
          required: false
          default: true
        - in: "query"
          name: "includeScResults"
          type: "boolean"
          description: "Whether to include Transaction's scResults. True if processTransactions is true."
          required: false
          default: false
        - in: "query"
          name: "processTransactions"
          type: "boolean"
          description: "Whether to process the Transaction and interpret it"
          required: false
          default: true
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TransactionsResponse"
  /transactions/{address}:
    get:
      tags:
        - "transaction"
      summary: "Get Transactions"
      description: "Get all Transactions for an address. Returns a List of Transaction objects."
      operationId: "getTransactions"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "address"
          type: "string"
          description: "Address in erd format"
          required: true
        - in: "query"
          name: "pageSize"
          type: "int"
          description: "Number of maximum Transactions in response (max 100)"
          required: false
          default: 20
        - in: "query"
          name: "startTimestamp"
          type: "integer"
          format: "int64"
          description: "Start timestamp to query from"
          required: false
          default: 0
        - in: "query"
          name: "newer"
          type: "boolean"
          description: "Whether to query newer or older Transactions starting with startTimestamp"
          required: false
          default: true
        - in: "query"
          name: "includeScResults"
          type: "boolean"
          description: "Whether to include Transaction's scResults. True if processTransactions is true."
          required: false
          default: false
        - in: "query"
          name: "processTransactions"
          type: "boolean"
          description: "Whether to process the Transaction and interpret it"
          required: false
          default: true
      responses:
        "400":
          description: "Missing address in request"
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TransactionsResponse"
  /transactions:
    post:
      tags:
        - "transaction"
      summary: "Get Transactions"
      description: "Get all Transactions matching request. Returns a List of Transaction objects."
      operationId: "getTransactionsWithPost"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Get all transactions matching request"
          required: true
          schema:
            $ref: '#/definitions/TransactionRequest'
      responses:
        "400":
          description: "Missing address in request"
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TransactionsResponse"
  /transaction:
    post:
      tags:
        - "transaction"
      summary: "Create Transaction"
      description: "Create a new Transaction"
      operationId: "postTransaction"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "New Transaction"
          required: true
          schema:
            $ref: '#/definitions/NewTransaction'
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NewTransactionState"

  /addresses:
    get:
      tags:
        - "address"
      summary: "Address List"
      description: "Get the entire address list. This is a paged resource. After you make your first request, you'll receive an AddressesResponse containing a requestId and a lastResult. These need to be passed as-is to the next page request (as query parameters)."
      operationId: "getAddresses"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "sort"
          type: "string"
          description: "Address Sorting mode. Needs to be one of: AddressAsc, AddressDesc, BalanceAsc, BalanceDesc"
          required: false
          default: "AddressAsc"
        - in: "query"
          name: "pageSize"
          type: "integer"
          description: "Requested number of addresses per page. Capped at a predefined value."
          required: false
          default: "20"
        - in: "query"
          name: "filter"
          type: "string"
          description: "Filter addresses using this keyword"
          required: false
        - in: "query"
          name: "requestId"
          type: "string"
          description: "String received from the previous query. Add it to the next request to continue pagination."
          required: false
        - in: "query"
          name: "startingWith"
          type: "string"
          description: "Your previous query contained firstResult and lastResult. Add lastResult as startingWith to the next request to continue pagination, or change to firstResult and reverse sort order if need to go to previous page (and it wasn't cached)."
          required: false
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AddressesResponse"

  /addresses/{address}:
    get:
      tags:
        - "address"
      summary: "Address Details"
      description: "Get an Address' Details. Returns an AddressDetails object."
      operationId: "getAddressDetails"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "address"
          type: "string"
          description: "Address in erd format"
          required: true
        - in: "query"
          name: "withDelegations"
          type: "boolean"
          description: "Whether to include the address' delegations"
          required: false
          default: false
        - in: "query"
          name: "withTokens"
          type: "boolean"
          description: "Whether to include the address' ESDTs and MetaESDTs"
          required: false
          default: false
        - in: "query"
          name: "withNfts"
          type: "boolean"
          description: "Whether to include the address' NFTs"
          required: false
          default: false
        - in: "query"
          name: "withSfts"
          type: "boolean"
          description: "Whether to include the address' SFTs"
          required: false
          default: false
      responses:
        "400":
          description: "Invalid address"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AddressDetails"

  /addresses/{address}/balance:
    get:
      tags:
        - "address"
      summary: "Address Balance"
      description: "Get an Address' Balance in EGLD. Returns a Value object."
      operationId: "getAddressBalance"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "address"
          type: "string"
          description: "Address in erd format"
          required: true
      responses:
        "400":
          description: "Invalid address"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Value"

  /addresses/{address}/nonce:
    get:
      tags:
        - "address"
      summary: "Address Nonce"
      description: "Get an Address' current Nonce. Returns a LongValue object."
      operationId: "getAddressNonce"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "address"
          type: "string"
          description: "Address in erd format"
          required: true
      responses:
        "400":
          description: "Invalid address"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LongValue"

  /nodes:
    get:
      tags:
        - "node"
      summary: "Get Nodes"
      description: "Get all Nodes (cached for 1h). Returns a List of Node objects."
      operationId: "getNodes"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Node"

  /stakingProviders:
    get:
      tags:
        - "node"
      summary: "Get Staking Providers"
      description: "Get all Staking Providers (cached for 24h). Returns a List of StakingProvider objects."
      operationId: "getStakingProviders"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StakingProvider"

  /delegators/{contractAddress}:
    get:
      tags:
        - "node"
      summary: "Get Delegators"
      description: "Get Delegators for a Staking Provider by Contract Address. Returns a List of Delegator objects."
      operationId: "getDelegators"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "contractAddress"
          type: "string"
          description: "Staking Contract Address in erd format"
          required: true
      responses:
        "400":
          description: "Invalid address"
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Delegator"

  /tokens:
    get:
      tags:
        - "token"
      summary: "Get Tokens"
      description: "Get all ESDTs and MetaESDTs (cached for 24h). Returns a List of TokenProperty objects."
      operationId: "getTokens"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TokenProperties"

  /tokens/{address}:
    get:
      tags:
        - "token"
      summary: "Get Address Tokens"
      description: "Get All Tokens for an Address. Returns a List of Token objects."
      operationId: "getTokensForAddress"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "address"
          type: "string"
          description: "Address in erd format"
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"

  /nfts:
    get:
      tags:
        - "token"
      summary: "Get NFTs"
      description: "Get all NFTs (cached for 24h). Returns a List of TokenProperty objects."
      operationId: "getNfts"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TokenProperties"

  /nfts/{address}:
    get:
      tags:
        - "token"
      summary: "Get Address NFTs"
      description: "Get All NFTs for an Address. Returns a List of Token objects."
      operationId: "getNftsForAddress"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "address"
          type: "string"
          description: "Address in erd format"
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"

  /sfts:
    get:
      tags:
        - "token"
      summary: "Get SFTs"
      description: "Get all SFTs (cached for 24h). Returns a List of TokenProperty objects."
      operationId: "getSfts"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TokenProperties"

  /sfts/{address}:
    get:
      tags:
        - "token"
      summary: "Get Address SFTs"
      description: "Get All SFTs for an Address. Returns a List of Token objects."
      operationId: "getSftsForAddress"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "address"
          type: "string"
          description: "Address in erd format"
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"

  /network/config:
    get:
      tags:
        - "network"
      summary: "Get the Network Config. Returns a NetworkConfig object."
      operationId: "networkConfig"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetworkConfig"

  /network/status:
    get:
      tags:
        - "network"
      summary: "Get the Network Status. Returns a NetworkStatus object."
      operationId: "networkStatus"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetworkStatus"

components:
  schemas:
    Transaction:
      type: "object"

definitions:
  Transaction:
    type: "object"
    properties:
      hash:
        type: "string"
      sender:
        type: "string"
      receiver:
        type: "string"
      transactionValue:
        $ref: '#/definitions/Value'
      value:
        $ref: '#/definitions/Value'
      otherValue:
        $ref: '#/definitions/Value'
      data:
        type: "string"
      nonce:
        type: "integer"
        format: "int64"
      gasLimit:
        type: "integer"
        format: "int64"
      gasPrice:
        type: "integer"
        format: "int64"
      gasUsed:
        type: "integer"
        format: "int64"
      fee:
        $ref: '#/definitions/Value'
      timestamp:
        type: "integer"
        format: "int64"
      senderShard:
        type: "integer"
        format: "int64"
      receiverShard:
        type: "integer"
        format: "int64"
      tokens:
        type: "array"
        items:
          type: "string"
      esdtValues:
        type: "array"
        items:
          type: "string"
      status:
        type: "string"
      type:
        $ref: '#/definitions/TransactionType'
      function:
        type: "string"
      hasScResults:
        type: "boolean"
      isScCall:
        type: "boolean"
      scResults:
        type: "array"
        items:
          $ref: '#/definitions/ScResult'
  TransactionType:
    type: "string"
    enum: [Send, Receive, Delegate, Undelegate, Withdraw, Claim, Compound, Swap, Wrap, Unwrap, EnterFarm, ExitFarm,
           EnterLP, ExitLP, ModifyDelegationCap, ChangeServiceFee, ReceiveValidationReward, Unknown]
  ScResult:
    type: "object"
    properties:
      hash:
        type: "string"
      sender:
        type: "string"
      receiver:
        type: "string"
      value:
        type: "string"
      data:
        type: "string"
      nonce:
        type: "integer"
        format: "int64"
      gasLimit:
        type: "integer"
        format: "int64"
      gasPrice:
        type: "integer"
        format: "int64"
      timestamp:
        type: "integer"
        format: "int64"
      prevTxHash:
        type: "string"
      originalTxHash:
        type: "string"
      hasOperations:
        type: "boolean"
      tokens:
        type: "array"
        items:
          type: "string"
      esdtValues:
        type: "array"
        items:
          type: "string"
  Value:
    type: "object"
    properties:
      bigNumber:
        type: "string"
      denominated:
        type: "number"
        format: "double"
      token:
        type: "string"

  TransactionRequest:
    type: "object"
    properties:
      address:
        type: "string"
      pageSize:
        type: "integer"
        default: 20
      startTimestamp:
        type: "integer"
        format: "int64"
        default: 0
      newer:
        type: "boolean"
        default: true
      includeScResults:
        type: "boolean"
        default: false
      processTransactions:
        type: "boolean"
        default: true
  TransactionsResponse:
    type: "object"
    properties:
      transactions:
        type: "array"
        items:
          $ref: '#/definitions/Transaction'
      hasMore:
        type: "boolean"
      lastTimestamp:
        type: "integer"
        format: "int64"

  AddressDetails:
    type: "object"
    properties:
      address:
        type: "string"
      nonce:
        type: "integer"
        format: "int64"
      balance:
        $ref: '#/definitions/Value'
      herotag:
        type: "string"
      ownerAddress:
        type: "string"
      tokens:
        type: "array"
        items:
          $ref: '#/definitions/Token'
      nfts:
        type: "array"
        items:
          $ref: '#/definitions/Token'
      sfts:
        type: "array"
        items:
          $ref: '#/definitions/Token'
      delegations:
        type: "array"
        items:
          $ref: '#/definitions/AddressDelegation'
      staked:
        $ref: '#/definitions/Value'
      unstaked:
        type: "array"
        items:
          $ref: '#/definitions/Unstaked'

  AddressesResponse:
    type: "object"
    properties:
      hasMore:
        type: "boolean"
      requestId:
        type: "string"
      firstResult:
        type: "string"
      lastResult:
        type: "string"
      addresses:
        type: "array"
        items:
          $ref: '#/definitions/SimpleAddressDetails'

  SimpleAddressDetails:
    type: "object"
    properties:
      address:
        type: "string"
      balance:
        $ref: '#/definitions/Value'

  AddressDelegation:
    type: "object"
    properties:
      stakingProvider:
        $ref: '#/definitions/StakingProvider'
      value:
        $ref: '#/definitions/Value'
      claimable:
        $ref: '#/definitions/Value'
      totalRewards:
        $ref: '#/definitions/Value'
      undelegatedList:
        type: "array"
        items:
          $ref: '#/definitions/UndelegatedValue'

  StakingProvider:
    type: "object"
    properties:
      address:
        type: "string"
      owner:
        type: "string"
      serviceFee:
        type: "number"
        format: "double"
      delegationCap:
        type: "integer"
        format: "int64"
      metadata:
        $ref: '#/definitions/StakingProviderMetadata'

  StakingProviderMetadata:
    type: "object"
    properties:
      name:
        type: "string"
      website:
        type: "string"
      keybaseIdentity:
        type: "string"

  Token:
    type: "object"
    properties:
      value:
        $ref: '#/definitions/Value'
      properties:
        $ref: '#/definitions/TokenProperties'

  TokenProperties:
    type: "object"
    properties:
      identifier:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      owner:
        type: "string"
      minted:
        type: "string"
      burnt:
        type: "string"
      decimals:
        type: "integer"
      isPaused:
        type: "boolean"
      canUpgrade:
        type: "boolean"
      canMint:
        type: "boolean"
      canBurn:
        type: "boolean"
      canChangeOwner:
        type: "boolean"
      canPause:
        type: "boolean"
      canFreeze:
        type: "boolean"
      canWipe:
        type: "boolean"
      canAddSpecialRoles:
        type: "boolean"
      canTransferNFTCreateRole:
        type: "boolean"
      nftCreateStopped:
        type: "boolean"
      wiped:
        type: "string"

  Node:
    type: "object"
    properties:
      identity:
        type: "string"
      name:
        type: "string"
      blsKey:
        type: "string"
      type:
        $ref: '#/definitions/NodeType'
      eligible:
        type: "boolean"
      provider:
        type: "string"
      owner:
        type: "string"

  NodeType:
    type: "string"
    enum: [ Validator, Observer ]

  Delegator:
    type: "object"
    properties:
      address:
        type: "string"
      value:
        $ref: '#/definitions/Value'

  UndelegatedValue:
    type: "object"
    properties:
      value:
        $ref: '#/definitions/Value'
      millisRemaining:
        type: "integer"
        format: "int64"

  NetworkConfig:
    type: "object"
    properties:
      chainId:
        type: "string"
      denomination:
        type: "integer"
      gasPerDataByte:
        type: "integer"
      gasPriceModifier:
        type: "number"
        format: "double"
      latestTagSoftwareVersion:
        type: "string"
      maxGasPerTransaction:
        type: "integer"
        format: "int64"
      minGasLimit:
        type: "integer"
        format: "int64"
      minGasPrice:
        type: "integer"
        format: "int64"
      minTransactionVersion:
        type: "integer"
      numMetachainNodes:
        type: "integer"
      numNodesInShard:
        type: "integer"
      numShardsWithoutMeta:
        type: "integer"
      rewardsTopUpGradientPoint:
        type: "string"
      roundDuration:
        type: "integer"
      roundsPerEpoch:
        type: "integer"
      metaConsensusGroupSize:
        type: "integer"
      shardConsensusGroupSize:
        type: "integer"
      startTime:
        type: "integer"
        format: "int64"
      topUpFactor:
        type: "number"
        format: "double"

  NetworkStatus:
    type: "object"
    properties:
      currentRound:
        type: "integer"
        format: "int64"
      epochNumber:
        type: "integer"
        format: "int64"
      highestFinalNonce:
        type: "integer"
        format: "int64"
      nonce:
        type: "integer"
        format: "int64"
      nonceAtEpochStart:
        type: "integer"
        format: "int64"
      noncesPassedInCurrentEpoch:
        type: "integer"
        format: "int64"
      roundsAtEpochStart:
        type: "integer"
        format: "int64"
      roundsPassedInCurrentEpoch:
        type: "integer"
      roundsPerEpoch:
        type: "integer"

  Unstaked:
    type: "object"
    properties:
      value:
        $ref: '#/definitions/Value'
      epochsRemaining:
        type: "integer"

  NewTransaction:
    type: "object"
    properties:
      chainId:
        type: "string"
      data:
        type: "string"
      gasLimit:
        type: "integer"
        format: "int64"
      gasPrice:
        type: "integer"
        format: "int64"
      nonce:
        type: "integer"
        format: "int64"
      receiver:
        type: "string"
      sender:
        type: "string"
      signature:
        type: "string"
      value:
        type: "string"
      version:
        type: "integer"

  NewTransactionState:
    type: "object"
    properties:
      hash:
        type: "string"
      receiverShard:
        type: "integer"
        format: "int64"
      senderShard:
        type: "integer"
        format: "int64"
      status:
        $ref: '#/definitions/NewTransactionStatus'
      error:
        type: "string"

  NewTransactionStatus:
    type: "string"
    enum: [ Pending, Failed ]

  LongValue:
    type: "object"
    properties:
      value:
        type: "integer"
        format: "int64"
