swagger: "2.0"
info:
  description: "This is an alternative Elrond API created by PartnerStaking."
  version: "0.0.1"
  title: "Elrond API"
  contact:
    email: "contact@partnerstaking.com"
  x-logo:
    url: 'https://partnerstaking.com/images/logo.png'
    altText: PartnerStaking
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: //api.partnerstaking.com
    description: Default server
  - url: //api-alpha.partnerstaking.com
    description: Alpha server

tags:
  - name: "transaction"
    description: "Endpoints for getting or executing transactions"
  - name: "transaction_model"
    x-displayName: Transaction
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Transaction" />

  - name: "address"
    description: "Endpoints used to obtain information about an Address"
  - name: "addressDetails_model"
    x-displayName: AddressDetails
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/AddressDetails" />

  - name: "node"
    description: "Endpoints used to obtain information about Nodes and Staking"
  - name: "node_model"
    x-displayName: Node
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Node" />
  - name: "stakingProvider_model"
    x-displayName: StakingProvider
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/StakingProvider" />

  - name: "token"
    description: "Endpoints used to obtain ESDT/NFT information"
  - name: "token_model"
    x-displayName: Token
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Token" />
  - name: "tokenProperties_model"
    x-displayName: TokenProperties
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TokenProperties" />

x-tagGroups:
  - name: Endpoints
    tags:
      - transaction
      - address
      - node
      - token
  - name: Models
    tags:
      - transaction_model
      - addressDetails_model
      - node_model
      - stakingProvider_model
      - token_model
      - tokenProperties_model

schemes:
  - "https"
paths:
  /transaction/{hash}:
    get:
      tags:
        - "transaction"
      summary: "Get transaction"
      description: "Get a transaction by hash"
      operationId: "transaction"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "hash"
          type: "string"
          description: "Transaction hash"
          required: true
        - in: "query"
          name: "process"
          type: "boolean"
          description: "Whether to process the transaction"
          required: false
          default: true
      responses:
        "400":
          description: "Invalid hash"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transaction"
  /transactions:
    post:
      tags:
        - "transaction"
      summary: "Get Transactions"
      description: "Get all Transactions matching request"
      operationId: "transactions"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Get all transactions matching request"
          required: true
          schema:
            $ref: '#/definitions/TransactionRequest'
      responses:
        "400":
          description: "Missing address in request"
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TransactionsResponse"

  /address/{address}:
    get:
      tags:
        - "address"
      summary: "Address Details"
      description: "Get an Address' Details"
      operationId: "getAddressDetails"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "address"
          type: "string"
          description: "Address in erd format"
          required: true
      responses:
        "400":
          description: "Invalid address"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AddressDetails"

  /nodes:
    get:
      tags:
        - "node"
      summary: "Get Nodes"
      description: "Get all Nodes (cached for 1h)"
      operationId: "getNodes"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Node"

  /stakingProviders:
    get:
      tags:
        - "node"
      summary: "Get Staking Providers"
      description: "Get all Staking Providers (cached for 24h)"
      operationId: "getStakingProviders"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StakingProvider"

  /delegators/{contractAddress}:
    get:
      tags:
        - "node"
      summary: "Get Delegators"
      description: "Get Delegators for a Staking Provider by Contract Address"
      operationId: "getDelegators"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "contractAddress"
          type: "string"
          description: "Staking Contract Address in erd format"
          required: true
      responses:
        "400":
          description: "Invalid address"
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Delegator"

  /tokens:
    get:
      tags:
        - "token"
      summary: "Get Tokens"
      description: "Get all Tokens (cached for 24h)"
      operationId: "getTokens"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TokenProperties"

  /tokens/{address}:
    get:
      tags:
        - "token"
      summary: "Get Address Tokens"
      description: "Get All Tokens for an Address"
      operationId: "getTokensForAddress"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "address"
          type: "string"
          description: "Address in erd format"
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"

components:
  schemas:
    Transaction:
      type: "object"

definitions:
  Transaction:
    type: "object"
    properties:
      hash:
        type: "string"
      sender:
        type: "string"
      receiver:
        type: "string"
      transactionValue:
        $ref: '#/definitions/Value'
      value:
        $ref: '#/definitions/Value'
      otherValue:
        $ref: '#/definitions/Value'
      data:
        type: "string"
      nonce:
        type: "integer"
        format: "int64"
      gasLimit:
        type: "integer"
        format: "int64"
      gasPrice:
        type: "integer"
        format: "int64"
      gasUsed:
        type: "integer"
        format: "int64"
      fee:
        $ref: '#/definitions/Value'
      timestamp:
        type: "integer"
        format: "int64"
      senderShard:
        type: "integer"
        format: "int64"
      receiverShard:
        type: "integer"
        format: "int64"
      tokens:
        type: "array"
        items:
          type: "string"
      esdtValues:
        type: "array"
        items:
          type: "string"
      status:
        type: "string"
      type:
        $ref: '#/definitions/TransactionType'
      hasScResults:
        type: "boolean"
      isScCall:
        type: "boolean"
      scResults:
        type: "array"
        items:
          $ref: '#/definitions/ScResult'
  TransactionType:
    type: "string"
    enum: [Send, Receive, Delegate, Undelegate, Withdraw, Claim, Compound, Swap, Wrap, Unwrap, EnterFarm, ExitFarm,
           EnterLP, ExitLP, ModifyDelegationCap, ChangeServiceFee, ReceiveValidationReward, Unknown]
  ScResult:
    type: "object"
    properties:
      hash:
        type: "string"
      sender:
        type: "string"
      receiver:
        type: "string"
      value:
        type: "string"
      data:
        type: "string"
      nonce:
        type: "integer"
        format: "int64"
      gasLimit:
        type: "integer"
        format: "int64"
      gasPrice:
        type: "integer"
        format: "int64"
      timestamp:
        type: "integer"
        format: "int64"
      prevTxHash:
        type: "string"
      originalTxHash:
        type: "string"
      hasOperations:
        type: "boolean"
      tokens:
        type: "array"
        items:
          type: "string"
      esdtValues:
        type: "array"
        items:
          type: "string"
  Value:
    type: "object"
    properties:
      bigNumber:
        type: "string"
      denominated:
        type: "string"
      token:
        type: "string"

  TransactionRequest:
    type: "object"
    properties:
      address:
        type: "string"
      pageSize:
        type: "integer"
        default: 20
      startTimestamp:
        type: "integer"
        format: "int64"
        default: 0
      newer:
        type: "boolean"
        default: true
      includeScResults:
        type: "boolean"
        default: false
      processTransactions:
        type: "boolean"
        default: true
  TransactionsResponse:
    type: "object"
    properties:
      transactions:
        type: "array"
        items:
          $ref: '#/definitions/Transaction'
      hasMore:
        type: "boolean"
      lastTimestamp:
        type: "integer"
        format: "int64"

  AddressDetails:
    type: "object"
    properties:
      address:
        type: "string"
      nonce:
        type: "integer"
        format: "int64"
      balance:
        $ref: '#/definitions/Value'
      herotag:
        type: "string"
      ownerAddress:
        type: "string"
      tokens:
        type: "array"
        items:
          $ref: '#/definitions/Token'
      delegations:
        type: "array"
        items:
          $ref: '#/definitions/AddressDelegation'

  AddressDelegation:
    type: "object"
    properties:
      stakingProvider:
        $ref: '#/definitions/StakingProvider'
      value:
        $ref: '#/definitions/Value'

  StakingProvider:
    type: "object"
    properties:
      address:
        type: "string"
      owner:
        type: "string"
      serviceFee:
        type: "number"
        format: "double"
      delegationCap:
        type: "integer"
        format: "int64"
      metadata:
        $ref: '#/definitions/StakingProviderMetadata'

  StakingProviderMetadata:
    type: "object"
    properties:
      name:
        type: "string"
      website:
        type: "string"
      keybaseIdentity:
        type: "string"

  Token:
    type: "object"
    properties:
      value:
        $ref: '#/definitions/Value'
      properties:
        $ref: '#/definitions/TokenProperties'

  TokenProperties:
    type: "object"
    properties:
      identifier:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      owner:
        type: "string"
      minted:
        type: "string"
      burnt:
        type: "string"
      decimals:
        type: "integer"
      isPaused:
        type: "boolean"
      canUpgrade:
        type: "boolean"
      canMint:
        type: "boolean"
      canBurn:
        type: "boolean"
      canChangeOwner:
        type: "boolean"
      canPause:
        type: "boolean"
      canFreeze:
        type: "boolean"
      canWipe:
        type: "boolean"
      canAddSpecialRoles:
        type: "boolean"
      canTransferNFTCreateRole:
        type: "boolean"
      nftCreateStopped:
        type: "boolean"
      wiped:
        type: "string"

  Node:
    type: "object"
    properties:
      identity:
        type: "string"
      name:
        type: "string"
      blsKey:
        type: "string"
      type:
        $ref: '#/definitions/NodeType'
      eligible:
        type: "boolean"
      provider:
        type: "string"
      owner:
        type: "string"

  NodeType:
    type: "string"
    enum: [ Validator, Observer ]

  Delegator:
    type: "object"
    properties:
      address:
        type: "string"
      value:
        $ref: '#/definitions/Value'
